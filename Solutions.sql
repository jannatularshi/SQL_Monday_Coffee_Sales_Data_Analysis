-- Monday Coffee -- Data Analysis:

select * from city;
select * from products;
select * from customers;
select * from sales;

-- Analyzing Coffee Shop Data and Reports--

-- Q.1: Identify any null or missing values in the dataset (for sales table).

select * from sales
where sale_id is null
or sale_date is null
or total is null;

-- Q.2: Calculate the sales trend and average sales per day.

--Sales trend:
select 
sale_date,
sum(total) as daily_sales
from sales
group by sale_date
order by sale_date;

--Average sales:
select 
sum(total) /
count(distinct sale_date) as daily_sales
from sales;

-- Q.3: How does the sales frequency in the shop occur per day?

select
sale_date,
count(*) as sales_frequency
from sales
group by sale_date
order by sale_date;

-- Q.4: How often does each customer makes a purchase per day?

select
customer_id,
count(distinct sale_date) as days_with_purchases,
count(*) as total_purchases,
count(*)::float/count(distinct sale_date) as purchases_per_day
from sales
group by customer_id
order by customer_id;

-- Q.5: How many days had zero sales in coffee shop?

select
count(distinct date_series)
as days_with_zero_sales
from
(select
generate_series(min(sale_date),
max(sale_date), '1 day'::interval) as date_series
from sales) as all_dates
left join sales
on all_dates.date_series:: date = sales.sale_date
where sales.sale_date is null;

-- Q.6: How does the sales frequency compare between weekdays and weekends? 

select 
case
when extract
(dow from sale_date) in (0,6)
then 'weekend'
else 'weekday'
end as day_type,
count(*) as sales_frequency
from sales
group by day_type
order by day_type;

-- Q.7: Determine the number of unique customers per week.

select 
extract (year from sale_date) as Year,
extract (week from sale_date) as Week,
count (distinct customer_id) as Unique_Customers
from sales
group by 
extract (year from sale_date),
extract (week from sale_date)
order by 
Year desc, Week;

-- Q.8: On which days of the week are the most sales made?

select 
to_char(sale_date, 'Day') as day_of_week,
sum (total) as total_sales
from sales
group by 
to_char(sale_date, 'Day')
order by 
total_sales desc ;

-- Q.9: What is the difference between highest and lowest sales by dates?

with sales_per_day as (
select
sale_date,
sum(total) as total_sales
from sales
group by sale_date)
select
(select sale_date from sales_per_day
order by total_sales desc limit 1) as highest_sales_date,
(select total_sales from sales_per_day
order by total_sales desc limit 1) as highest_sales,
(select sale_date from sales_per_day
order by total_sales asc limit 1) as lowest_sales_date,
(select total_sales from sales_per_day
order by total_sales asc limit 1) as lowest_sales,
(select total_sales from sales_per_day
order by total_sales desc limit 1) -
(select total_sales from sales_per_day
order by total_sales asc limit 1) as sales_difference;

-- Q.10: What is the estimated number of coffee consumers in each city, based on the assumption that 30% of the population consumes coffee?

select
city_name,
round((population * 0.30)/1000000,2)
as coffee_consumers_millions,
city_rank
from city 
order by 2 desc;

-- Q.11: What is the overall revenue from coffee sales in all cities for the last quarter of the per year?

select
extract (year from s.sale_date) as Year,
c.city_name,
sum(s.total) as total_revenue
from sales as s 
join customers as cu 
on s.customer_id=cu.customer_id
join city as c
on c.city_id=cu.city_id
where
extract (quarter from s.sale_date)= 3
group by c.city_name,
extract (year from sale_date)
order by Year, total_revenue desc;

-- Q.12: What is the total income for the per year from coffee sales?

select 
extract (year from sale_date) as Year,
sum(total) as total_revenue
from sales
group by  
extract (year from sale_date)
order by Year;

-- Q.13: How much revenue generated by each product category?

select p.product_name,
sum (s.total) as total_sales
from sales as s
join products as p
on s.product_id=p.product_id
group by
p.product_name
order by 
total_sales desc;

-- Q.14: What is the total number of units sold for coffee products?

select
p.product_name,
count (s.sale_id) as total_orders
from products as p
left join 
sales as s
on s.product_id=p.product_id
group by 
p.product_name
order by
total_orders desc;

-- Q.15: What is the average sales amount per customer in each city?

select
c.city_name,
sum (s.total) as total_revenue,
count (distinct s.customer_id) as total_customers,
round(
sum (s.total)::numeric/ count (distinct s.customer_id)::numeric,2)
as avg_sale_per_customer
from sales as s
join customers as cu
on s.customer_id=cu.customer_id
join city as c
on c.city_id=cu.city_id
group by 1
order by 2 desc;

-- Q.16: Who are the top 10 customers by total spending every year?

select 
year,
customer_id,
customer_name,
total_spending
from(
select
extract (year from s.sale_date) as year,
cu.customer_id,
cu.customer_name,
sum(s.total) as total_spending,
rank () over (partition by extract (year from s.sale_date)
order by sum (s.total) desc) as rank
from sales as s
join customers as cu
on s.customer_id= cu.customer_id
group by year,cu.customer_id,
cu.customer_name) as ranked
where rank <=10
order by year,rank;

-- Q.17: How did each product perform in terms of sales across the months per year?

select
to_char(s.sale_date, 'Month') as month,
extract(year from s.sale_date) as year,
p.product_name,
sum (s.total) as total_sales
from sales as s
join products as p
on s.product_id= p.product_id
group by
to_char(s.sale_date, 'Month'),
extract(year from s.sale_date),
p.product_name
order by month,year,total_sales desc;

-- Q.18: How many customers make repeat purchases for each product per year?

select
Year,
product_name,
count(customer_id) as repeat_customers
from (
select
extract (year from s.sale_date) as Year,
p.product_name,
s.customer_id,
count (s.sale_id) as purchase_count
from sales as s
join products as p
on s.product_id= p.product_id
group by year, p.product_name, s.customer_id
having count (s.sale_id) > 1) as subquery
group by Year, product_name
order by Year, repeat_customers desc;

-- Q.19: What is the number of new customers and returning customers per year?

with customer_first_purchase as
(
select customer_id,
min(extract(year from sale_date)) as first_purchase_year
from sales
group by customer_id)
select 
extract(year from s.sale_date) as sale_year,
case 
when extract(year from s.sale_date)= cfp.first_purchase_year 
then
'new customer'
else 'returning customer'
end as customer_type,
count(distinct s.customer_id) as 
customer_count
from sales as s
join customer_first_purchase as cfp
on s.customer_id= cfp.customer_id
group by sale_year,customer_type
order by sale_year,customer_type desc;

-- Q.20: Provide a list of the cities along with their populations and the estimated number of coffee consumers in each.

with city_table as 
(
select 
city_name,
round((population * 0.25)/1000000, 2) as coffee_consumers
from city
),
customers_table
as
(
select 
c.city_name,
count(distinct cu.customer_id) as unique_customer
from sales as s
join customers as cu
on cu.customer_id = s.customer_id
join city as c
on c.city_id = cu.city_id
group by 1
)  
select 
customers_table.city_name,
city_table.coffee_consumers as coffee_consumer_in_millions,
customers_table.unique_customer
from city_table
join 
customers_table
on city_table.city_name = customers_table.city_name;

-- Q.21: What are the top 3 selling products in each city based on sales volume?

select * from -- table
(
select
c.city_name,
p.product_name,
count (s.sale_id) as total_orders,
dense_rank() over(partition by c.city_name order by count(s.sale_id) desc) as rank
from sales as s
join products as p
on s.product_id=p.product_id
join customers as cu
on cu.customer_id=s.customer_id
join city as c
on c.city_id=cu.city_id
group by 1, 2
) as t1
where rank <=3

-- Q.22: How many unique customers are there in each city who have purchased coffee products?

select 
c.city_name,
count(distinct cu.customer_id) as unique_customer
from city as c
left join
customers as cu
on cu.city_id = c.city_id
join sales as s
on s.customer_id = cu.customer_id
where 
s.product_id in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
group by 1
order by unique_customer desc;

-- Q.23: Find each city and their average sale per customer and avg rent per customer.

with city_table
as
(
select 
c.city_name,
sum(s.total) as total_revenue,
count (distinct s.customer_id) as total_customers,
round(
sum(s.total)::numeric/
count(distinct s.customer_id)::numeric,2) as avg_sale_pr_customer
from sales as s
join customers as cu
on s.customer_id = cu.customer_id
join city as c
on c.city_id = cu.city_id
group by 1
order by 2 DESC
),
city_rent
as
(select 
city_name, 
estimated_rent
from city
)
select
cr.city_name,
cr.estimated_rent,
ct.total_customers,
ct.avg_sale_pr_customer,
round(
cr.estimated_rent::numeric/ct.total_customers::numeric, 2) as avg_rent_per_customer
from city_rent as cr
join city_table as ct
on cr.city_name = ct.city_name
order by 4 desc;

-- Q.24: Calculate the percentage growth (or decline) in sales over different time periods (monthly) by each city.

with
monthly_sales
as
(
select 
c.city_name,
extract(month from sale_date) as month,
extract(year from sale_date) as YEAR,
sum(s.total) as total_sale
from sales as s
join customers as cu
on cu.customer_id = s.customer_id
join city as c
on c.city_id = cu.city_id
group by 1, 2, 3
order by 1, 3, 2
),
growth_ratio
AS
(
select
city_name,
month,
year,
total_sale as cr_month_sale,
lag(total_sale, 1) over(partition by city_name order by year, month) 
as last_month_sale	
from monthly_sales
)
select
city_name,
month,
year,
cr_month_sale,
last_month_sale,
round(
(cr_month_sale-last_month_sale)::numeric/last_month_sale::numeric * 100, 2)
as growth_ratio
from growth_ratio
where 
last_month_sale is not null;

-- Q.25: Identify top 3 city based on highest sales, return city name, total sale, total rent, total customers, estimated coffee consumer.

with city_table
as
(
select 
c.city_name,
sum(s.total) as total_revenue,
count (distinct s.customer_id) as total_customers,
round(
sum(s.total)::numeric/
count (distinct s.customer_id)::numeric,2) as avg_sale_pr_customer		
from sales as s
join customers as cu
on s.customer_id = cu.customer_id
join city as c
on c.city_id = cu.city_id
group by 1
order by 2 desc
),
city_rent
as
(
select
city_name, 
estimated_rent,
round((population * 0.30)/1000000, 3) as estimated_coffee_consumer_in_millions
from city
)
select 
cr.city_name,
total_revenue,
cr.estimated_rent as total_rent,
ct.total_customers,
estimated_coffee_consumer_in_millions,
ct.avg_sale_pr_customer,
round(
cr.estimated_rent::numeric/ct.total_customers::numeric, 2) as avg_rent_per_customer
from city_rent as cr
join city_table as ct
on cr.city_name = ct.city_name
order by 2 desc;





